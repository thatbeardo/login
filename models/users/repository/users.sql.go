// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const createConsumer = `-- name: CreateConsumer :one
INSERT INTO consumers(
  fanfit_user_id
) VALUES(
  $1
)
RETURNING fanfit_user_id
`

func (q *Queries) CreateConsumer(ctx context.Context, fanfitUserID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createConsumer, fanfitUserID)
	var fanfit_user_id int32
	err := row.Scan(&fanfit_user_id)
	return fanfit_user_id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users ( 
  first_name,
  last_name, 
  email,
  created_date,
  user_type_id,
  username,
  phone_no,
  gender,
  profile_picture,
  bio
) VALUES (
  $1, 
  $2, 
  $3,
  $4, 
  $5, 
  $6,
  $7, 
  $8, 
  $9,
  $10
)
RETURNING id, user_type_id, first_name, last_name, email, created_date, username, phone_no, gender, profile_picture, bio
`

type CreateUserParams struct {
	FirstName      string
	LastName       string
	Email          string
	CreatedDate    interface{}
	UserTypeID     int32
	Username       sql.NullString
	PhoneNo        sql.NullInt32
	Gender         sql.NullString
	ProfilePicture sql.NullString
	Bio            sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.CreatedDate,
		arg.UserTypeID,
		arg.Username,
		arg.PhoneNo,
		arg.Gender,
		arg.ProfilePicture,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserTypeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedDate,
		&i.Username,
		&i.PhoneNo,
		&i.Gender,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE email = $1
RETURNING id, user_type_id, first_name, last_name, email, created_date, username, phone_no, gender, profile_picture, bio
`

func (q *Queries) DeleteUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserTypeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedDate,
		&i.Username,
		&i.PhoneNo,
		&i.Gender,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_type_id, first_name, last_name, email, created_date, username, phone_no, gender, profile_picture, bio FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserTypeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedDate,
		&i.Username,
		&i.PhoneNo,
		&i.Gender,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}
